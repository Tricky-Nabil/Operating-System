diff --git a/Makefile b/Makefile
index 39a99d7..6c80e68 100644
--- a/Makefile
+++ b/Makefile
@@ -87,7 +87,7 @@ $U/initcode: $U/initcode.S
 tags: $(OBJS) _init
 	etags *.S *.c
 
-ULIB = $U/ulib.o $U/usys.o $U/printf.o $U/umalloc.o
+ULIB = $U/ulib.o $U/usys.o $U/printf.o $U/umalloc.o $U/thread_mutex.o $U/thread_condvar.o $U/thread_semaphore.o $U/thread_spinlock.o
 
 _%: %.o $(ULIB)
 	$(LD) $(LDFLAGS) -T $U/user.ld -o $@ $^
@@ -132,6 +132,8 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_threads\
+	$U/_producer_consumer\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
diff --git a/kernel/defs.h b/kernel/defs.h
index a3c962b..5ce0cf9 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -106,6 +106,12 @@ void            yield(void);
 int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
+int             thread_create(uint64 func, uint64 arg, uint64 stack);
+void            thread_join(int pid);
+void            thread_freepagetable(pagetable_t pagetable, uint64 sz);
+int             condvar_sleep(uint64 addr , int value);
+void            condvar_wakeup(uint64 addr , int variable);
+
 
 // swtch.S
 void            swtch(struct context*, struct context*);
@@ -163,7 +169,8 @@ int             mappages(pagetable_t, uint64, uint64, uint64, int);
 pagetable_t     uvmcreate(void);
 void            uvmfirst(pagetable_t, uchar *, uint);
 uint64          uvmalloc(pagetable_t, uint64, uint64, int);
-uint64          uvmdealloc(pagetable_t, uint64, uint64);
+//uint64          uvmdealloc(pagetable_t, uint64, uint64);
+uint64          uvmdealloc(pagetable_t, uint64, uint64, int);
 int             uvmcopy(pagetable_t, pagetable_t, uint64);
 void            uvmfree(pagetable_t, uint64);
 void            uvmunmap(pagetable_t, uint64, uint64, int);
@@ -173,6 +180,8 @@ uint64          walkaddr(pagetable_t, uint64);
 int             copyout(pagetable_t, uint64, char *, uint64);
 int             copyin(pagetable_t, char *, uint64, uint64);
 int             copyinstr(pagetable_t, char *, uint64, uint64);
+int             uvmmirror(pagetable_t, pagetable_t, uint64 , uint64);
+uint64          virtual_address_to_physical_address(pagetable_t pagetable, uint64 src_virtual_address);
 
 // plic.c
 void            plicinit(void);
diff --git a/kernel/proc.c b/kernel/proc.c
index 959b778..b3623f0 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -9,6 +9,7 @@
 struct cpu cpus[NCPU];
 
 struct proc proc[NPROC];
+struct spinlock memlocks[NPROC];
 
 struct proc *initproc;
 
@@ -53,6 +54,7 @@ procinit(void)
   initlock(&wait_lock, "wait_lock");
   for(p = proc; p < &proc[NPROC]; p++) {
       initlock(&p->lock, "proc");
+      initlock(&p->memlock, "memlock");
       p->state = UNUSED;
       p->kstack = KSTACK((int) (p - proc));
   }
@@ -145,6 +147,8 @@ found:
   memset(&p->context, 0, sizeof(p->context));
   p->context.ra = (uint64)forkret;
   p->context.sp = p->kstack + PGSIZE;
+  p->mem_id = p->pid % NPROC;
+  p->is_thread = 0;
 
   return p;
 }
@@ -158,8 +162,18 @@ freeproc(struct proc *p)
   if(p->trapframe)
     kfree((void*)p->trapframe);
   p->trapframe = 0;
-  if(p->pagetable)
-    proc_freepagetable(p->pagetable, p->sz);
+
+  // if(p->pagetable)
+  //    proc_freepagetable(p->pagetable, p->sz);
+
+  if(p->pagetable && p->is_thread){
+    thread_freepagetable(p->pagetable , p->sz);
+  }
+  else if(p->pagetable){
+    proc_freepagetable(p->pagetable , p->sz);
+  }
+
+  p->is_thread = 0;
   p->pagetable = 0;
   p->sz = 0;
   p->pid = 0;
@@ -215,6 +229,11 @@ proc_freepagetable(pagetable_t pagetable, uint64 sz)
   uvmfree(pagetable, sz);
 }
 
+void thread_freepagetable(pagetable_t pagetable, uint64 sz){
+  uvmunmap(pagetable, TRAMPOLINE, 1, 0);
+  uvmunmap(pagetable, TRAPFRAME, 1, 0);
+}
+
 // a user program that calls exec("/init")
 // assembled from ../user/initcode.S
 // od -t xC ../user/initcode
@@ -261,16 +280,33 @@ growproc(int n)
 {
   uint64 sz;
   struct proc *p = myproc();
+  acquire(&memlocks[p->mem_id]);
 
   sz = p->sz;
   if(n > 0){
     if((sz = uvmalloc(p->pagetable, sz, sz + n, PTE_W)) == 0) {
       return -1;
     }
+    for(struct proc* tempp = proc; tempp < &proc[NPROC]; tempp++){
+      acquire(&tempp->lock);
+      if(tempp->mem_id == p->mem_id && tempp->is_thread){
+        uvmmirror(p->pagetable, tempp->pagetable, sz, sz+n);
+      }
+      release(&tempp->lock);
+    }
   } else if(n < 0){
-    sz = uvmdealloc(p->pagetable, sz, sz + n);
+    //sz = uvmdealloc(p->pagetable, sz, sz + n);
+    sz = uvmdealloc(p->pagetable, sz, sz + n, 1);
+    for(struct proc* tempp = proc; tempp < &proc[NPROC]; tempp++){
+      acquire(&tempp->lock);
+      if(tempp->mem_id == p->mem_id && tempp->is_thread){
+        uvmdealloc(p->pagetable, sz, sz + n, 0);
+      }
+      release(&tempp->lock);
+    }
   }
   p->sz = sz;
+  release(&memlocks[p->mem_id]);
   return 0;
 }
 
@@ -311,6 +347,7 @@ fork(void)
   safestrcpy(np->name, p->name, sizeof(p->name));
 
   pid = np->pid;
+  np->mem_id = np->pid % NPROC;
 
   release(&np->lock);
 
@@ -325,6 +362,7 @@ fork(void)
   return pid;
 }
 
+
 // Pass p's abandoned children to init.
 // Caller must hold wait_lock.
 void
@@ -434,6 +472,8 @@ wait(uint64 addr)
   }
 }
 
+
+
 // Per-CPU process scheduler.
 // Each CPU calls scheduler() after setting itself up.
 // Scheduler never returns.  It loops, doing:
@@ -681,3 +721,146 @@ procdump(void)
     printf("\n");
   }
 }
+
+
+int
+thread_create(uint64 func, uint64 arg, uint64 stack)
+{
+  int i, pid;
+  struct proc *np;
+  struct proc *p = myproc();
+
+  if((np = allocproc()) == 0){
+    return -1;
+  }
+
+  // Copy user memory from parent to child.
+  if(uvmmirror(p->pagetable, np->pagetable, 0, p->sz) < 0){
+    freeproc(np);
+    release(&np->lock);
+    return -1;
+  }
+  np->sz = p->sz;
+
+  *(np->trapframe) = *(p->trapframe);
+
+  p->trapframe->a0 = np->pid;
+
+  for(i = 0; i < NOFILE; i++)
+    if(p->ofile[i])
+      np->ofile[i] = filedup(p->ofile[i]);
+  np->cwd = idup(p->cwd);
+
+  safestrcpy(np->name, p->name, sizeof(p->name));
+
+  pid = np->pid;
+  np->is_thread = 1;
+  np->mem_id = p->mem_id;
+  np->trapframe->sp = stack + PGSIZE - sizeof(void *);
+  np->trapframe->a0 = arg;
+  //np->trapframe->a1 = stack;
+  np->trapframe->epc = func;
+  np->trapframe->ra = 0xffffffff;
+  
+
+  if(copyout(p->pagetable, stack - sizeof(void *), (char *)&arg, sizeof(arg)) < 0)
+    return -1;
+
+  release(&np->lock);
+
+  acquire(&wait_lock);
+  np->parent = p;
+  release(&wait_lock);
+
+  acquire(&np->lock);
+  np->state = RUNNABLE;
+  release(&np->lock);
+
+  return pid;
+}
+
+
+
+void thread_join(int pid)
+{
+  struct proc *pp;
+  int havekids;
+  struct proc *p = myproc();
+
+  acquire(&wait_lock);
+
+  for(;;){
+    // Scan through table looking for exited children.
+    havekids = 0;
+    for(pp = proc; pp < &proc[NPROC]; pp++){
+      if(pp->parent == p && pp->is_thread == 1 && pp->pid == pid){
+        // make sure the child isn't still in exit() or swtch().
+        acquire(&pp->lock);
+
+        havekids = 1;
+        if(pp->state == ZOMBIE){
+          // Found one.
+          pid = pp->pid;
+          freeproc(pp);
+          release(&pp->lock);
+          release(&wait_lock);
+          return ;
+        }
+        release(&pp->lock);
+      }
+    }
+
+    // No point waiting if we don't have any children.
+    if(!havekids || killed(p)){
+      release(&wait_lock);
+      return ;
+    }
+
+    // Wait for a child to exit.
+    sleep(p, &wait_lock);  //DOC: wait-sleep
+  }
+}
+
+int
+condvar_sleep(uint64 addr , int value)
+{
+  struct proc *p = myproc();
+  acquire(&memlocks[p->mem_id]);
+  int *physical_addr = (int*) virtual_address_to_physical_address(p->pagetable , addr);
+
+  if(__sync_bool_compare_and_swap(physical_addr , value , value)){
+    sleep(physical_addr, &memlocks[p->mem_id]);
+    release(&memlocks[p->mem_id]);
+    return 0;
+  }
+
+  release(&memlocks[p->mem_id]);
+
+  return -1;
+}
+
+void
+condvar_wakeup(uint64 addr , int variable)
+{
+  struct proc *p = myproc();
+  struct proc *pp;
+  acquire(&memlocks[p->mem_id]);
+
+  int *physical_addr = (int*) virtual_address_to_physical_address(p->pagetable , addr);
+
+  for(pp = proc; pp < &proc[NPROC] && variable > 0; pp++) {
+      if(pp != myproc()){
+        acquire(&pp->lock);
+        if(pp->state == SLEEPING && pp->chan == physical_addr && p->mem_id == pp->mem_id) {
+          pp->state = RUNNABLE;
+          variable--;
+        }
+        release(&pp->lock);
+      }
+  }
+
+  release(&memlocks[p->mem_id]);
+
+}
+
+
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..57c1253 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -104,4 +104,7 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  struct spinlock memlock;    // Given
+  int is_thread;
+  int mem_id;
 };
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..9661b4e 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -101,6 +101,11 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_thread_create(void);
+extern uint64 sys_thread_join(void);
+extern uint64 sys_thread_exit(void);
+extern uint64 sys_condvar_sleep(void);
+extern uint64 sys_condvar_wakeup(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,6 +131,11 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_thread_create] sys_thread_create,
+[SYS_thread_join] sys_thread_join,
+[SYS_thread_exit] sys_thread_exit,
+[SYS_condvar_sleep] sys_condvar_sleep,
+[SYS_condvar_wakeup] sys_condvar_wakeup
 };
 
 void
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..c5d67a0 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,8 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_thread_create 22
+#define SYS_thread_join 23
+#define SYS_thread_exit 24
+#define SYS_condvar_sleep 25
+#define SYS_condvar_wakeup 26
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 1de184e..dbc110d 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -89,3 +89,61 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+uint64 
+sys_thread_create(void)
+{
+  uint64 fcn , arg , stack;
+
+  argaddr(0, &fcn);
+  argaddr(1, &arg);
+  argaddr(2, &stack);
+
+  uint64 temp = thread_create(fcn , arg , stack);
+
+  return temp;
+}
+
+
+uint64 
+sys_thread_join(void)
+{
+  int thread_id;
+
+  argint(0, &thread_id);
+  thread_join(thread_id);
+
+  return 0;
+}
+
+
+uint64 
+sys_thread_exit(void)
+{
+  exit(0);
+  return 0;
+}
+
+uint64 
+sys_condvar_sleep(void)
+{
+  int value;
+  uint64 addr;
+  argaddr(0 , &addr);
+  argint(1 , &value);
+
+  uint64 temp = condvar_sleep(addr , value);
+  return temp;
+}
+
+uint64
+sys_condvar_wakeup(void)
+{
+  int variable;
+  uint64 addr;
+  argaddr(0 , &addr);
+  argint(1 , &variable);
+
+  condvar_wakeup(addr , variable);
+  return 0;
+}
diff --git a/kernel/vm.c b/kernel/vm.c
index 9f69783..a11ff82 100644
--- a/kernel/vm.c
+++ b/kernel/vm.c
@@ -235,13 +235,15 @@ uvmalloc(pagetable_t pagetable, uint64 oldsz, uint64 newsz, int xperm)
   for(a = oldsz; a < newsz; a += PGSIZE){
     mem = kalloc();
     if(mem == 0){
-      uvmdealloc(pagetable, a, oldsz);
+      //uvmdealloc(pagetable, a, oldsz);
+      uvmdealloc(pagetable, a, oldsz , 1);
       return 0;
     }
     memset(mem, 0, PGSIZE);
     if(mappages(pagetable, a, PGSIZE, (uint64)mem, PTE_R|PTE_U|xperm) != 0){
       kfree(mem);
-      uvmdealloc(pagetable, a, oldsz);
+      //uvmdealloc(pagetable, a, oldsz);
+      uvmdealloc(pagetable , a , oldsz , 1);
       return 0;
     }
   }
@@ -252,15 +254,20 @@ uvmalloc(pagetable_t pagetable, uint64 oldsz, uint64 newsz, int xperm)
 // newsz.  oldsz and newsz need not be page-aligned, nor does newsz
 // need to be less than oldsz.  oldsz can be larger than the actual
 // process size.  Returns the new process size.
+
+// uint64
+// uvmdealloc(pagetable_t pagetable, uint64 oldsz, uint64 newsz);
+
 uint64
-uvmdealloc(pagetable_t pagetable, uint64 oldsz, uint64 newsz)
+uvmdealloc(pagetable_t pagetable, uint64 oldsz, uint64 newsz , int free_request)
 {
   if(newsz >= oldsz)
     return oldsz;
 
   if(PGROUNDUP(newsz) < PGROUNDUP(oldsz)){
     int npages = (PGROUNDUP(oldsz) - PGROUNDUP(newsz)) / PGSIZE;
-    uvmunmap(pagetable, PGROUNDUP(newsz), npages, 1);
+    //uvmunmap(pagetable, PGROUNDUP(newsz), npages, 1);
+    uvmunmap(pagetable, PGROUNDUP(newsz), npages, free_request);
   }
 
   return newsz;
@@ -332,6 +339,7 @@ uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
   return -1;
 }
 
+
 // mark a PTE invalid for user access.
 // used by exec for the user stack guard page.
 void
@@ -437,3 +445,43 @@ copyinstr(pagetable_t pagetable, char *dst, uint64 srcva, uint64 max)
     return -1;
   }
 }
+
+int
+uvmmirror(pagetable_t old , pagetable_t new , uint64 isz , uint64 fsz)
+{
+  pte_t *pte;
+  uint64 pa, i;
+  uint flags;
+
+  for(i = isz ; i < fsz ; i += PGSIZE){
+    if((pte = walk(old, i, 0)) == 0)
+      panic("uvmcopy: pte should exist");
+    if((*pte & PTE_V) == 0)
+      panic("uvmcopy: page not present");
+    pa = PTE2PA(*pte);
+    flags = PTE_FLAGS(*pte);
+
+    if(mappages(new, i, PGSIZE, pa , flags) != 0){
+      goto err;
+    }
+  }
+  return 0;
+
+ err:
+  uvmunmap(new, 0, i / PGSIZE, 1);
+  return -1;
+}
+
+
+uint64
+virtual_address_to_physical_address(pagetable_t pagetable , uint64 src_virtual_address)
+{
+  uint64 va0 = PGROUNDDOWN(src_virtual_address);
+  uint64 pa0 = walkaddr(pagetable , va0);
+
+  uint64 temp = pa0 + src_virtual_address - va0;
+
+  return temp;  
+}
+
+
diff --git a/user/producer_consumer.c b/user/producer_consumer.c
new file mode 100644
index 0000000..ae3e5b8
--- /dev/null
+++ b/user/producer_consumer.c
@@ -0,0 +1,139 @@
+#ifndef __PRODUCER_CONSUMER__
+#define __PRODUCER_CONSUMER__
+
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+//#include "user/thread_condvar.h"
+#include "user/thread_semaphore.h"
+//#include "user/thread_mutex.h"
+
+struct queue{
+	int arr[16];
+	int front;
+	int rear;
+	int size;
+};
+void queue(struct queue* q){
+    q->front = 0;
+	q->rear = 0;
+	q->size = 0; 
+}
+
+void push(struct queue* q , int x){
+    q->arr[q->rear] = x;
+	q->rear = (q->rear+1)%16;
+	q->size++;
+}
+int front(struct queue* q){
+    if(q->size == 0){
+        return -1;
+    }
+    return q->arr[q->front];
+}
+void pop(struct queue* q){
+    q->front = (q->front+1)%16;
+    q->size--;
+}	
+	
+struct queue q;
+// a mutex object lock 
+// a semaphore object empty
+// a semaphore object full
+
+struct thread_mutex mlock;
+struct thread_semaphore empty; 
+struct thread_semaphore full;
+
+void init_semaphore()
+{
+
+	// initialize mutex lock
+	// initialize semaphore empty with 5
+	// initialize semaphore full with 0
+    thread_mutex_init(&mlock);
+    thread_sem_init(&empty, 5);
+    thread_sem_init(&full, 0);
+
+}
+
+void ProducerFunc(void * arg)
+{	
+    thread_mutex_lock(&mlock);
+	printf("%s\n",(char*)arg);
+	thread_mutex_unlock(&mlock);
+	int i;
+	for(i=1;i<=10;i++)
+	{
+		// wait for semphore empty
+        thread_sem_wait(&empty);
+
+		// wait for mutex lock
+        thread_mutex_lock(&mlock);
+		
+		sleep(1);	
+        push(&q , i);
+		printf("producer produced item %d\n",i);
+		
+		// unlock mutex lock	
+        thread_mutex_unlock(&mlock);
+		// post semaphore full
+        thread_sem_post(&full);
+	}
+
+    thread_exit();
+}
+
+void ConsumerFunc(void * arg)
+{
+	thread_mutex_lock(&mlock);
+	printf("%s\n",(char*)arg);
+	thread_mutex_unlock(&mlock);
+	int i;
+	for(i=1;i<=10;i++)
+	{	
+		// wait for semphore full
+        thread_sem_wait(&full);
+		// wait for mutex lock
+        thread_mutex_lock(&mlock);
+ 		
+			
+		sleep(1);
+		int item = front(&q);
+		pop(&q);
+		printf("consumer consumed item %d\n",item);	
+
+
+		// unlock mutex lock
+        thread_mutex_unlock(&mlock);
+		// post semaphore empty		
+        thread_sem_post(&empty);
+	}
+    thread_exit();
+}
+
+int main(void)
+{	
+	
+	init_semaphore();
+	
+	char * message1 = "i am producer";
+	char * message2 = "i am consumer";
+
+
+	void *s1, *s2;
+  	int thread1, thread2;
+
+  	s1 = malloc(4096);
+  	s2 = malloc(4096);
+
+  	thread1 = thread_create(ProducerFunc, (void*)message1, s1);
+  	thread2 = thread_create(ConsumerFunc, (void*)message2, s2); 
+
+  	thread_join(thread1);
+  	thread_join(thread2);	
+	
+	exit(0);
+}
+
+#endif
diff --git a/user/thread_condvar.c b/user/thread_condvar.c
new file mode 100644
index 0000000..0741559
--- /dev/null
+++ b/user/thread_condvar.c
@@ -0,0 +1,51 @@
+#ifndef __THREAD_CONDVAR_H__
+#define __THREAD_CONDVAR_H__
+
+#include "kernel/types.h"
+#include "user/user.h"
+#include "user/thread_condvar.h"
+//#include "user/thread_mutex.c"
+
+void
+thread_condvar_init(struct thread_condvar* lk)
+{
+    lk->s = 0;
+    lk->n = 0;
+}
+
+
+void 
+thread_condvar_wait(struct thread_condvar* lk, struct thread_mutex* mlock)
+{
+    __sync_fetch_and_and(&lk->s , 0);
+    thread_mutex_unlock(mlock);
+
+    while(__sync_bool_compare_and_swap(&lk->s , 0 , 0)){
+        __sync_fetch_and_add(&lk->n , 1);
+        condvar_sleep(&lk->s , 0);
+        __sync_fetch_and_add(&lk->n , -1);
+    }
+    thread_mutex_lock(mlock);
+}
+
+void
+thread_condvar_signal(struct thread_condvar* lk)
+{
+    __sync_synchronize();
+    __sync_bool_compare_and_swap(&lk->s , 0 , 1);
+    if (!__sync_bool_compare_and_swap(&lk->n , 0 , 0)) {
+ 		condvar_wakeup(&lk->s , 1);
+ 	}
+}
+
+void 
+thread_condvar_broadcast(struct thread_condvar* lk)
+{
+    __sync_synchronize();
+    __sync_bool_compare_and_swap(&lk->s , 0 , 1);
+    if (!__sync_bool_compare_and_swap(&lk->n , 0 , 0)) {
+ 		condvar_wakeup(&lk->s , 64);
+ 	}
+}
+
+#endif
\ No newline at end of file
diff --git a/user/thread_condvar.h b/user/thread_condvar.h
new file mode 100644
index 0000000..f286f13
--- /dev/null
+++ b/user/thread_condvar.h
@@ -0,0 +1,11 @@
+#include "user/thread_mutex.h"
+
+struct thread_condvar{
+    int s , n;
+};
+
+void thread_condvar_init(struct thread_condvar* lk);
+void thread_condvar_wait(struct thread_condvar* lk , struct thread_mutex *mlock);
+void thread_condvar_signal(struct thread_condvar* lk);
+void thread_condvar_broadcast(struct thread_condvar* lk);
+
diff --git a/user/thread_mutex.c b/user/thread_mutex.c
new file mode 100644
index 0000000..eb16af3
--- /dev/null
+++ b/user/thread_mutex.c
@@ -0,0 +1,58 @@
+#ifndef __THREAD_MUTEX__H
+#define __THREAD_MUTEX__H
+
+#include "kernel/types.h"
+#include "kernel/riscv.h"
+#include "user/user.h"
+#include "user/thread_mutex.h"
+
+
+void
+thread_mutex_init(struct thread_mutex *lk)
+{
+    lk->locked = 0;
+    lk->pid = -1;
+}
+
+// Acquire the lock.
+// Loops (spins) until the lock is acquired.
+void
+thread_mutex_lock(struct thread_mutex* lk)
+{
+    while(__sync_lock_test_and_set(&lk->locked , 1) != 0){
+        sleep(10);
+    }
+    // Tell the C compiler and the processor to not move loads or stores
+    // past this point, to ensure that the critical section's memory
+    // references happen strictly after the lock is acquired.
+    // On RISC-V, this emits a fence instruction.
+    __sync_synchronize();
+
+    lk->pid = getpid();
+}
+
+// Release the lock.
+void
+thread_mutex_unlock(struct thread_mutex* lk)
+{
+
+    lk->pid = -1;
+    // Tell the C compiler and the CPU to not move loads or stores
+    // past this point, to ensure that all the stores in the critical
+    // section are visible to other CPUs before the lock is released,
+    // and that loads in the critical section occur strictly before
+    // the lock is released.
+    // On RISC-V, this emits a fence instruction.
+    __sync_synchronize();
+
+    // Release the lock, equivalent to lk->locked = 0.
+    // This code doesn't use a C assignment, since the C standard
+    // implies that an assignment might be implemented with
+    // multiple store instructions.
+    // On RISC-V, sync_lock_release turns into an atomic swap:
+    //   s1 = &lk->locked
+    //   amoswap.w zero, zero, (s1)
+    __sync_lock_release(&lk->locked);
+}
+
+#endif
\ No newline at end of file
diff --git a/user/thread_mutex.h b/user/thread_mutex.h
new file mode 100644
index 0000000..ab2a0ea
--- /dev/null
+++ b/user/thread_mutex.h
@@ -0,0 +1,9 @@
+struct thread_mutex{
+    uint locked;
+    int pid;
+};
+
+void thread_mutex_init(struct thread_mutex* lk);
+void thread_mutex_lock(struct thread_mutex* lk);
+void thread_mutex_unlock(struct thread_mutex* lk);
+
diff --git a/user/thread_semaphore.c b/user/thread_semaphore.c
new file mode 100644
index 0000000..35ad8e8
--- /dev/null
+++ b/user/thread_semaphore.c
@@ -0,0 +1,38 @@
+#ifndef __THREAD_SEM__
+#define __THREAD_SEM__
+
+#include "kernel/types.h"
+#include "user/user.h"
+//#include "user/thread_condvar.c"
+#include "user/thread_semaphore.h"
+
+void 
+thread_sem_init(struct thread_semaphore* sem, int value)
+{
+    sem->value = value;
+    thread_mutex_init(&sem->mtx);
+    thread_condvar_init(&sem->condvar);
+}
+
+void 
+thread_sem_wait(struct thread_semaphore* sem)
+{
+	thread_mutex_lock(&sem->mtx);
+    while (sem->value == 0){
+        thread_condvar_wait(&sem->condvar, &sem->mtx);
+    }
+    sem->value--;
+    thread_mutex_unlock(&sem->mtx);
+}
+
+void 
+thread_sem_post(struct thread_semaphore* sem)
+{
+	thread_mutex_lock(&sem->mtx);
+    sem->value++;
+    thread_condvar_signal(&sem->condvar);
+    //thread_condvar_broadcast(&sem->condvar);
+    thread_mutex_unlock(&sem->mtx);
+    
+}
+#endif
\ No newline at end of file
diff --git a/user/thread_semaphore.h b/user/thread_semaphore.h
new file mode 100644
index 0000000..1dcbb51
--- /dev/null
+++ b/user/thread_semaphore.h
@@ -0,0 +1,13 @@
+#include "user/thread_condvar.h"
+
+struct thread_semaphore
+{
+    int value;
+    struct thread_mutex mtx;
+    struct thread_condvar condvar;
+};
+
+void thread_sem_init(struct thread_semaphore* sem , int val);
+void thread_sem_wait(struct thread_semaphore* sem);
+void thread_sem_post(struct thread_semaphore* sem);
+
diff --git a/user/thread_spinlock.c b/user/thread_spinlock.c
new file mode 100644
index 0000000..7a3f8d4
--- /dev/null
+++ b/user/thread_spinlock.c
@@ -0,0 +1,58 @@
+#ifndef __THREAD_SPINLOCK__H
+#define __THREAD_SPINLOCK__H
+
+#include "kernel/types.h"
+#include "kernel/riscv.h"
+#include "user/user.h"
+#include "user/thread_spinlock.h"
+
+void
+thread_spin_init(struct thread_spinlock *lk)
+{
+    lk->locked = 0;
+    lk->pid = -1;
+  
+}
+
+// Acquire the lock.
+// Loops (spins) until the lock is acquired.
+void
+thread_spin_lock(struct thread_spinlock *lk)
+{
+    while(__sync_lock_test_and_set(&lk->locked, 1) != 0)
+    ;
+
+    // Tell the C compiler and the processor to not move loads or stores
+    // past this point, to ensure that the critical section's memory
+    // references happen strictly after the lock is acquired.
+    // On RISC-V, this emits a fence instruction.
+    __sync_synchronize();
+    lk->pid = getpid();
+  
+}
+
+// Release the lock.
+void
+thread_spin_unlock(struct thread_spinlock *lk)
+{
+    lk->pid = -1;
+  
+    // Tell the C compiler and the CPU to not move loads or stores
+    // past this point, to ensure that all the stores in the critical
+    // section are visible to other CPUs before the lock is released,
+    // and that loads in the critical section occur strictly before
+    // the lock is released.
+    // On RISC-V, this emits a fence instruction.
+     __sync_synchronize();
+
+    // Release the lock, equivalent to lk->locked = 0.
+    // This code doesn't use a C assignment, since the C standard
+    // implies that an assignment might be implemented with
+    // multiple store instructions.
+    // On RISC-V, sync_lock_release turns into an atomic swap:
+    //   s1 = &lk->locked
+    //   amoswap.w zero, zero, (s1)
+    __sync_lock_release(&lk->locked);
+}
+
+#endif
\ No newline at end of file
diff --git a/user/thread_spinlock.h b/user/thread_spinlock.h
new file mode 100644
index 0000000..445a7cb
--- /dev/null
+++ b/user/thread_spinlock.h
@@ -0,0 +1,8 @@
+struct thread_spinlock{
+    uint locked;
+    int pid;
+};
+
+void thread_spin_init(struct thread_spinlock* lk);
+void thread_spin_lock(struct thread_spinlock* lk);
+void thread_spin_unlock(struct thread_spinlock* lk);
diff --git a/user/threads.c b/user/threads.c
new file mode 100644
index 0000000..16f82f4
--- /dev/null
+++ b/user/threads.c
@@ -0,0 +1,90 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+//#include "user/thread_mutex.h"
+#include "user/thread_spinlock.h"
+#include "user/thread_semaphore.h"
+
+struct balance {
+    char name[32];
+    int amount;
+};
+
+struct thread_spinlock lock;
+struct thread_mutex mlock;
+
+volatile int total_balance = 0;
+
+volatile unsigned int delay (unsigned int d) {
+   unsigned int i;
+   for (i = 0; i < d; i++) {
+       __asm volatile( "nop" ::: );
+   }
+
+   return i;
+}
+
+void do_work(void *arg){
+    int i;
+    int old;
+
+    struct balance *b = (struct balance*) arg;
+    thread_mutex_lock(&mlock);
+    printf( "Starting do_work: s:%s\n", b->name);
+    thread_mutex_unlock(&mlock);
+
+    for (i = 0; i < b->amount; i++) {
+         // lock and mlock will be implemented by you.
+         // thread_spin_lock(&lock);
+         thread_mutex_lock(&mlock);
+         old = total_balance;
+         delay(100000);
+         // if(old != total_balance)  printf("we will miss an update. old: %d total_balance: %d\n", old, total_balance);
+         total_balance = old + 1;
+         //thread_spin_unlock(&lock);
+         thread_mutex_unlock(&mlock);
+
+	 
+    }
+
+    thread_mutex_lock(&mlock);
+    printf( "Done s:%x\n", b->name);
+    thread_mutex_unlock(&mlock);
+
+    thread_exit();
+    return;
+}
+
+void init_semaphore(){
+    thread_mutex_init(&mlock);
+    thread_spin_init(&lock);
+
+}
+
+int main(int argc, char *argv[]) {
+
+  init_semaphore();
+
+  struct balance b1 = {"b1", 3200};
+  struct balance b2 = {"b2", 2800};
+
+  void *s1, *s2;
+  int thread1, thread2, r1, r2;
+
+  s1 = malloc(4096); // 4096 is the PGSIZE defined in kernel/riscv.h
+  s2 = malloc(4096);
+
+  thread1 = thread_create(do_work, (void*)&b1, s1);
+  thread2 = thread_create(do_work, (void*)&b2, s2);
+
+  r1 = thread_join(thread1);
+  r2 = thread_join(thread2);
+
+  delay(10);
+
+  
+    printf("Threads finished: (%d):%d, (%d):%d, shared balance:%d\n",
+      thread1, r1, thread2, r2, total_balance);
+
+  exit(0);
+}
\ No newline at end of file
diff --git a/user/user.h b/user/user.h
index 4d398d5..04fa3c4 100644
--- a/user/user.h
+++ b/user/user.h
@@ -22,6 +22,11 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int thread_create(void(*fcn)(void*), void *arg, void*stack);
+int thread_join(int thread_id);
+void thread_exit(void);
+int condvar_sleep(int* , int);
+void condvar_wakeup(int* , int);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..f4d516f 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,8 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("thread_create");
+entry("thread_join");
+entry("thread_exit");
+entry("condvar_sleep");
+entry("condvar_wakeup");
\ No newline at end of file
